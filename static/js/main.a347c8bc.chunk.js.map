{"version":3,"sources":["translations.js","components/NavBar.js","components/ServiceCard.js","pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["locale","english","What","Subtext","citation80pp","services","arabic","useStyles","makeStyles","theme","grow","flexGrow","title","display","breakpoints","up","sectionDesktop","NavBar","languageMode","handleLanguageToggle","classes","className","AppBar","position","style","background","boxShadow","color","Toolbar","Typography","variant","noWrap","FormGroup","row","marginRight","FormControlLabel","control","Switch","checked","onChange","value","inputProps","label","labelPlacement","Button","root","maxWidth","media","height","ServiceCard","props","Grid","item","xs","md","textAlign","padding","Card","CardMedia","image","service","CardContent","gutterBottom","component","description","CardActions","size","alignItems","paper","spacing","palette","text","secondary","Home","t","useTranslate","container","map","key","App","React","useState","setLanguageMode","translations","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a347c8bc.chunk.js","sourcesContent":["export default {\n    locale: \"en\",\n    english: {\n      What: \"Location Empowered Insights\",\n      Subtext: \"Location intelligence is the ability to analyze and find spatial patterns in data, to provide powerful insights into understanding our world and communicating our needs.\",\n      citation80pp:\"80% of data has a location component\",\n      services:\"Value proposition\",\n    \n    },\n    arabic: {\n      What: \"اﻹستشراف المموقع\",\n      Subtext: \"الذكاء الجغرافي يمثل القدرة على التحليل والبحث عن العلاقات الفضائية المتواجدة بين البيانات، من أجل نظرة إستشرافية ثاقبة تساعدنا على فهم عالمنا و توضيح مبتغانا\",\n      citation80pp:\"ثمانين بالمائة (80%) من البيانات تمتلك بعد جغرافي\",\n      services:\"الخدمات المقترحة\"\n      \n    }\n  };\n  ","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Switch from \"@material-ui/core/Switch\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Button from \"@material-ui/core/Button\";\n\nimport { fade, makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles(theme => ({\n    grow: {\n        flexGrow: 1\n    },\n    title: {\n        display: \"none\",\n        [theme.breakpoints.up(\"sm\")]: {\n            display: \"block\"\n        }\n    },\n    sectionDesktop: {\n      display: \"none\",\n      [theme.breakpoints.up(\"md\")]: {\n        display: \"flex\"\n      }\n    }\n}));\n\nconst NavBar = ({ languageMode, handleLanguageToggle }) => {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.grow}>\n            <AppBar position=\"static\"\n                style={{\n                    background: \"transparent\",\n                    boxShadow: \"none\",\n                    color: \"#3F3D4B\"\n                }}>\n                <Toolbar>\n                    <Typography className={classes.title} variant=\"h4\" noWrap>\n                        Enlight.me\n                    </Typography>\n\n                    <div className={classes.grow} />\n                    <div className={classes.sectionDesktop}>\n                        <FormGroup row style={{ marginRight: \"40px\" }}>\n                            <FormControlLabel\n                                control={\n                                    <Switch\n                                        checked={languageMode}\n                                        onChange={() => handleLanguageToggle()}\n                                        value=\"checkedB\"\n                                        color=\"primary\"\n                                        inputProps={{ \"aria-label\": \"primary checkbox\" }}\n                                    />\n                                }\n                                label={languageMode ? \"Arabic\" : \"English\"}\n                                labelPlacement=\"start\"\n                            />\n                        </FormGroup>\n                        <Button color=\"inherit\">Home</Button>\n                        <Button color=\"inherit\">Home</Button>\n                        <Button color=\"inherit\">Home</Button>\n                    </div>\n                </Toolbar>\n\n            </AppBar>\n        </div>\n\n    );\n}\nexport default NavBar;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles({\n    root: {\n      maxWidth: 400,\n    },\n    media: {\n      height: 140,\n    },\n  });\n\nconst ServiceCard = (props) => {\n    const classes = useStyles();\n    return (\n        <Grid\n            item\n            xs={12}\n            md={4}\n            style={{ textAlign: \"center\", padding: \"2rem\" }}\n        >\n            <Card className={classes.root}>\n                <CardMedia \n                    className={classes.media}\n                    image={props.service.image}\n                    title={props.service.title}\n                />\n                <CardContent>\n                    <Typography gutterBottom variant=\"caption\" component=\"h1\">\n                        {props.service.title}\n                    </Typography>\n                    <Typography component=\"p\">\n                        {props.service.description}\n                    </Typography>\n                </CardContent>\n                <CardActions>\n                    <Button size=\"small\" color=\"primary\">\n                        More details\n                        </Button>\n                </CardActions>\n            </Card>\n        </Grid>\n    );\n}\n\nexport default ServiceCard;","import React, { Fragment } from \"react\";\nimport Typography from '@material-ui/core/Typography';\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useTranslate } from \"react-translate\";\n\nimport NavBar from '../components/NavBar';\nimport ServiceCard from '../components/ServiceCard';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    alignItems: \"center\"\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary\n  }\n}));\n\nconst Home = ({ languageMode, handleLanguageToggle }) => {\n\n  const proServices = [{ title: 'Blockchain', description: 'Blockchain Based Solutions', image: \"/static/images/blockchain-logo.jpg\" },\n                       { title: 'GIS', description: 'Geographical Informations Systems (GIS)', image: \"/static/images/gis.png\" },\n                       { title: 'SDS', description: 'Spatial Data Science', image: \"/static/images/gis.png\" }];\n\n  let t = useTranslate(languageMode ? \"english\" : \"arabic\");\n  const classes = useStyles();\n\n  return (\n    <Fragment>\n      <div className=\"landingContainer\">\n        <NavBar\n          languageMode={languageMode}\n          handleLanguageToggle={handleLanguageToggle}\n        />\n        <div className={classes.root}>\n          <Grid container spacing={3}>\n            <Grid item xs={12} md={6}>\n              <div className=\"opening-blurb\">\n                <Typography variant=\"h2\">{t(\"What\")} </Typography>\n                <hr />\n                <Typography variant=\"h5\">{t(\"Subtext\")}</Typography>\n              </div>\n            </Grid>\n          </Grid>\n        </div>\n      </div>\n      <div className=\"blurb\">\n        <Grid container spacing={3}>\n          <Grid\n            item\n            xs={12}\n            md={12}\n            style={{ textAlign: \"center\", padding: \"5rem\" }}\n          >\n            <Typography variant=\"h3\" style={{ color: \"white\" }}> {t(\"citation80pp\")} </Typography>\n          </Grid>\n        </Grid>\n      </div>\n\n      <div className=\"howitworks\">\n        <Grid container spacing={3}>\n          <Grid\n            item\n            xs={12}\n            md={12}\n            style={{ textAlign: \"center\", padding: \"2rem\" }}\n          >\n            <Typography variant=\"h2\">{t(\"services\")} </Typography>\n          </Grid>\n\n          {proServices.map(service => (                    \n                    <ServiceCard service={service}  key={service.title}/>\n            ))}\n\n        </Grid>\n        |</div>\n\n\n    </Fragment>\n  );\n}\n\nexport default Home;\n","import React from 'react';\n\nimport { TranslatorProvider } from \"react-translate\";\n\nimport translations from \"./translations\";\n\nimport Home from './pages/Home.js';\nimport './App.css';\n\nfunction App() {\n\n  const [languageMode, setLanguageMode] = React.useState(true);\n\n  const handleLanguageToggle = () => {\n    setLanguageMode(!languageMode);\n  };\n\n  return (\n    <div className=\"App\">\n\n      <TranslatorProvider translations={translations}>\n\n        <Home languageMode={languageMode}\n          handleLanguageToggle={handleLanguageToggle} />\n      </TranslatorProvider>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}